@use "sass:math";

@if (map-get($components, "form")) {
	// All form fields
	input,
	select,
	textarea {
		accent-color: var(--color-primary, auto);
	}

	// Form fields (minus checkbox/radio)
	:--form-field,
	select,
	textarea {
		background-color: var(--form-field-bg, white);

		appearance: none;
		outline: 0;

		display: inline-block;
		vertical-align: middle;

		box-sizing: border-box;
		width: 100%;
		max-width: 100%; // In case user changes width we still want max-width 100%

		margin: 0;
		padding: var(--form-field-padding-y, 0.75rem) var(--form-field-padding-x, 1.25rem);

		font-size: var(--form-field-font-size, var(--body-font-size, inherit));
		font-family: var(--form-field-font-family, var(--body-font-family, inherit));
		font-weight: var(--form-field-font-weight, var(--body-font-weight, inherit));

		letter-spacing: var(--form-field-letter-spacing, var(--body-letter-spacing, inherit));
		line-height: var(--form-field-line-height, var(--body-line-height, inherit));

		text-transform: none;
		text-decoration: none;
		text-align: left;
		color: var(--form-field-text-color, var(--text-color, inherit));

		transition: all var(--form-field-transition-duration, 0.25s) var(--easing);

		border-width: var(--form-field-border-width, 1px);
		border-style: var(--form-field-border-style, solid);
		border-color: var(--form-field-border-color, var(--color-border, black));
		border-radius: var(--form-field-border-radius, var(--border-radius, 0));

		&:hover {
			background-color: var(--form-field-hover-bg, var(--form-field-bg, white));
			border-color: var(--form-field-hover-border-color, var(--color-primary, blue));
		}

		&:focus {
			background-color: var(--form-field-focus-bg, var(--form-field-bg, white));
			border-color: var(--form-field-focus-border-color, var(--color-primary, blue));
			outline: 0;
		}
	}

	// Select
	select {
		background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 40 40"><polygon points="2.7,14.4 6.8,10.3 20,23.5 33.2,10.3 37.3,14.4 20,31.7 "/></svg>');
		background-repeat: no-repeat;
		background-position: right var(--form-field-padding-x, 1.25rem) top 50%;
		background-size: var(--select-arrow-size, 0.5rem) auto;
		padding-right: calc(var(--form-field-padding-x, 1.25rem) * 2 + var(--select-arrow-size, 0.5rem));
	}

	// Textarea
	textarea {
		resize: vertical;

		&:where(:not([rows])) {
			height: 12rem;
		}
	}

	// Placeholders
	::placeholder {
		color: var(--placeholder-color, var(--color-gray, #999));
	}

	// Hide search UI
	input[type=search] {
		&::-webkit-search-decoration,
		&::-webkit-search-cancel-button,
		&::-webkit-search-results-button,
		&::-webkit-search-results-decoration {
			display: none;
		}
	}

	////////
	// WPCF7
	@if (map-get($components, "form-wpcf7")) {
		.wpcf7 {
			.screen-reader-response {
				display: none;
			}

			.wpcf7-not-valid-tip {
				margin: var(--spacing-small, 0.75rem) 0 0;
				color: var(--color-error, red);
			}

			.ajax-loader {
				display: none;
				margin-left: var(--spacing-medium);

				&:before {
					@include icon($icon-spinner);

					margin: 0;
				}

				&.is-active {
					display: inline;

					&:before {
						animation: spin 2s infinite linear;
					}
				}
			}
		}
	}

	//////////
	// HS Form
	@if (map-get($components, "form-hs")) {
		.form-title:empty {
			display: none;
		}

		.hs-form {
			fieldset {
				max-width: none !important;
			}

			.hs-input {
				width: 100% !important;

				&[type=radio],
				&[type=checkbox] {
					width: auto !important;
					margin-right: var(--spacing-x-small, 0.5rem);
				}
			}

			// Legal consent
			.legal-consent-container {
				// Legal checkbox
				.hs-form-booleancheckbox-display input {
					float: none !important;
					width: auto !important;
					margin-right: var(--spacing-small, 0.75rem);
				}

				// NOTE: What's this?
				.hs-form-booleancheckbox-display > span {
					display: inline;
					margin: 0;
				}

				// NOTE: We need to overwrite this b/c of HS styling
				.field.hs-form-field {
					margin: 0 0 var(--form-field-spacing, var(--spacing-medium));
				}

				// Need to override this
				.hs-error-msgs label {
					color: var(--color-error) !important;
				}
			}

			// Cols
			fieldset.form-columns-1,
			fieldset.form-columns-2,
			fieldset.form-columns-3,
			fieldset.form-columns-4,
			fieldset.form-columns-5,
			fieldset.form-columns-6,
			fieldset.form-columns-7,
			fieldset.form-columns-8 {
				.hs-form-field {
					width: auto !important;
					float: none !important;
				}

				.input {
					margin: 0 !important;
				}
			}

			@media (--tablet) {
				@for $i from 2 through 8 {
					fieldset.form-columns-#{$i} {
						$grid-gap: 1rem;
						$total-gap: ($i - 1) * $grid-gap;
						$gap-per-item: math.div($total-gap, $i);

						.hs-form-field {
							float: left !important;
							width: calc(#{math.div(100%, $i)} - #{$gap-per-item}) !important;
							margin-right: $grid-gap;

							&:last-child {
								margin-right: 0;
							}
						}
					}
				}
			}
		}

		// Each field
		.hs-form-field {
			display: block;
			margin: 0 0 var(--form-field-spacing, var(--spacing-medium));

			// Labels
			> label,
			> legend {
				display: block;
				margin: 0 0 var(--spacing-small, 0.75rem);
			}

			// Checkboxes / radios
			ul.inputs-list {
				margin: 0;
				list-style: none;

				li {
					display: inline-block;
					margin: 0 var(--spacing-medium) var(--spacing-medium) 0;

					&:last-child {
						margin: 0;
					}
				}
			}

			// List of errors
			ul.hs-error-msgs {
				margin: var(--spacing-small, 0.75rem) 0 0;
				list-style: none;

				li {
					display: block;
					margin: 0 0 var(--spacing-small);

					&:last-child {
						margin-bottom: 0;
					}
				}
			}

			.hs-error-msg {
				color: var(--color-error);
			}
		}

		// NOTE: What's this?
		.hs_error_rollup {
			display: none;
		}
	}
}
